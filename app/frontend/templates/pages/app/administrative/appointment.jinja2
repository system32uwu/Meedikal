{% from "components/app/form-field.jinja2" import formField with context %}
{% from "components/app/users-table.jinja2" import usersTable with context %}
{% from "components/app/error-box.jinja2" import errorBox with context %}
{% extends 'layouts/app-base.jinja2' %}

{% block title %}{{'Create' if 'create' in request.endpoint else 'Update'}} Appointment{% endblock %}

{% block pageContent%}
<script>

  let branches = {{ branches| tojson | safe}};
  let selectedBranch = {{ selectedBranch| tojson | safe}};
  let selectedDoctor = {{ selectedDoctor| tojson | safe}};

  let doctors = [];

  const drawTable = (_data) => {
    let rows = Array(_data.length);

    doctors = _data;
    for (let obj of _data) {

      let userId = obj["user"]["id"];

      let cells = [
        nameCell(
          `${obj["user"]["name1"]} ${obj["user"]["surname1"]}`,
          obj["user"]["photoUrl"]
        ),
        generateCell(userId),
        generateCell(obj["user"]["sex"]),
        generateCell(obj["user"]["birthdate"].split(" ")[0]),
        generateActiveCell(userId, obj["user"]["active"], 'toggleActive'),
        generateSelectDoctorCell(userId, "selectDoctor"),
      ];
      rows.push(generateRow(cells, userId));
    }

    tableContainer.innerHTML = generateTable(
      "users-table",
      ["Name", "ID", "Sex", "Birthdate", "Status", "Actions"],
      rows
    );

    try {
      if (selectedDoctor.user) {
        document.getElementById(`icon-${selectedDoctor['user']['id']}`).src = '/static/icons/success.svg';
      }
    } catch { }
  }
</script>
<div class="w-full h-full px-6 lg:px-10 pt-4">
  <h1 class="text-lg font-bold text-center w-full">Appointment information</h1>
  <div class="shadow-xl p-4 space-y-2" id="appointment-fields">
    {% if appointment.get('ID', none) is not none %}
    {{formField("ID", appointment.get('ID', ''), true)}}
    {% endif %}
    {{formField("Name", appointment.get('name', ''))}}
    {{formField("Date", appointment.get('date', 'T').split('T')[0], false if 'create' in request.endpoint else true, 'YYYY-MM-DD')}}
    {{formField("Starts At", appointment.get('startsAt', 'T:00').split('T')[1].rsplit(':',1)[0], false if 'create' in request.endpoint else true, 'HH:MM')}}
    {{formField("Ends At", appointment.get('endsAt', 'T').split('T')[1].rsplit(':',1)[0], false if 'create' in request.endpoint else true, 'HH:MM')}}
    {{formField("ETPP", appointment.get('etpp', ''), false if 'create' in request.endpoint else true, 'Automatically calculated if times provided.')}}
    {{formField("Number of Turns", appointment.get('maxTurns', ''), false if 'create' in request.endpoint else true, 'Automatically calculated if times provided.')}}
  </div>
  {{errorBox('error-box-ap-data')}}

  <h1 class="pt-4 text-lg font-bold text-center w-full">Select a branch for the appointment to take place</h1>
  <div class="h-4/5 w-full overflow-y-auto pt-1">
    {% include 'components/branches.jinja2' %}
  </div>

  <h1 class="text-lg font-bold text-center w-full">Select a Doctor for the appointment</h1>
  <div class="h-4/5 w-full">{{usersTable(['doctor'], 'doctor')}}</div>

  <div class="mt-4 mb-4 flex justify-between w-full space-x-10">
    <button onclick="window.location.href=window.location.href;" class="bg-red-500 w-full font-bold text-white text-center text-sm rounded-full py-2">
      Cancel
    </button>
    <button id="save" class="bg-turqoise w-full font-bold text-white text-center text-sm rounded-full py-2">
      Save
    </button>
  </div>
</div>
<script>
  (async function () {
    let conditions = {
      extraFilters: {
        role: "doctor",
      },
    };

    await loadUsers(offset, conditions);
    await setPagination(
      "user",
      offset,
      limit,
      paginationContainer,
      "loadUsers",
      conditions
    );
  })();
</script>
<script>
  let mode = "{{request.endpoint.rsplit('.')[2]}}" === 'createAppointment' ? 'CREATE' : 'UPDATE';
  
  _searchSpContainer.classList.remove('hidden');

  const selectBranch = async (id) => {
    if (mode === 'UPDATE') {
      if (selectedBranch){
        if (selectedBranch["id"] !== id) {
          let res = await fetch(`/api/branches/apTakesPlace/{{appointment["id"]}}`, {
            method: 'PUT',
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ idBranch: parseInt(id) })
          });
        }
      }else{
        let res = await fetch(`/api/branches/apTakesPlace/{{appointment["id"]}}/${parseInt(id)}`, {
          method: 'POST',
          headers: {
            Accept: "application/json",
          },
        });
      }
    }

    document.getElementById(`icon-${selectedBranch["id"]}`).src = '/static/icons/swap.svg';
    document.getElementById(`icon-${id}`).src = '/static/icons/success.svg';

    selectedBranch = branches.find(b => b.id === parseInt(id));
  }

  const selectDoctor = async (id) => {
    if (mode === 'UPDATE') {
      if (selectedDoctor.user) {
        if (selectedDoctor.user.id !== id) {
          let res = await fetch(`/api/appointments/assignedTo/{{appointment["id"]}}`, {
            method: 'PUT',
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ idDoc: id })
          });
        }
      } else {
        let res = await fetch(`/api/appointments/assignedTo`, {
          method: 'POST',
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ idAp: appointment.id, idDoc: id })
        });
      }
    }

    if (selectedDoctor.user) {
      document.getElementById(`icon-${selectedDoctor.user.id}`).src = '/static/icons/swap.svg';
    }

    document.getElementById(`icon-${id}`).src = '/static/icons/success.svg';
    selectedDoctor = doctors.find(d => d.user.id === parseInt(id));
  }

  document.getElementById('save').addEventListener('click', async () => {
    toggleLoadingModal();
    let res;

    let name = document.getElementById('Name');
    let date = document.getElementById('Date');
    let startsAt = document.getElementById('Starts At');
    let endsAt = document.getElementById('Ends At');
    let etpp = document.getElementById('ETPP');
    let maxTurns = document.getElementById('Number of Turns');

    let body = {
      name: name.value,
      date: date.value,
      startsAt: startsAt.value,
      endsAt: endsAt.value,
      etpp: etpp.value || null,
      maxTurns: maxTurns.value || null
    }

    if (!validateLength(name, 3 ,'Provide a name for this appointment.')) { return; }
    if (!validateType(date, 'date', 'Invalid input (YYYY-MM-DD format expected).')){ return; }
    if (etpp.value){
      if (!validateType(etpp, 'numeric')){ return; }
    }
    if (maxTurns.value){
      if (!validateType(maxTurns, 'numeric')){ return; }
    }

    let d = new Date(body.date);

    d.setUTCHours(0, 0, 0, 0);
    body.date = d.toISOString();

    let start;
    let end;

    if (body.startsAt){
        start = new Date(body.date);
        let [startHour, startMinute] = body.startsAt.split(":");
        start.setUTCHours(startHour, startMinute, 0, 0);
        if (isNaN(start)) {
          markFieldError(startsAt);
          showError('Invalid Input (HH:MM format expected).' + ` Must be time.`);
          window.scrollTo(0,0);
          return false;
        }
        body.startsAt = start.toISOString();
    }

    if (body.endsAt){
        end = new Date(body.date);
        let [endHour, endMinute] = body.endsAt.split(":");
        end.setUTCHours(endHour, endMinute, 0, 0);
        if (isNaN(end)) {
          markFieldError(endsAt);
          showError('Invalid Input (HH:MM format expected).' + ` Must be time.`);
          window.scrollTo(0,0);
          return false;
        }
        body.endsAt = end.toISOString();
    }

    if (body.startsAt && body.endsAt) {
      //difference in minutes / etpp = maxTurns
      let diffMins = Math.round(Math.abs(end - start) / 1000 / 60); //ms / 1000 = seconds / 60 = minutes
 
      if (body.etpp && !body.maxTurns) {
        body.maxTurns = Math.floor(diffMins / parseInt(body.etpp));
        maxTurns.value = body.maxTurns;
      } else if (body.maxTurns && !body.etpp){
        body.etpp = Math.floor(diffMins / parseInt(body.maxTurns))
        etpp.value = body.etpp;
      }
    }

    if (mode === 'CREATE') {
      res = await fetch('/api/appointments', {
        method: 'POST',
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body)
      });
    } else {
      res = await fetch('/api/appointments/{{appointment.id}}', {
        method: 'PUT',
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body)
      });
    }

    const savedAppointment = await res.json();

    if (res.status !== 200) {
      return handleErrorResponse(res);
    }

    if (mode === 'UPDATE') {
      return showOkModal();
    }

    if (selectedBranch) {
      await fetch(`/api/branches/apTakesPlace/${savedAppointment.result.id}/${parseInt(selectedBranch.id)}`, {
        method: 'POST',
        headers: {
          Accept: "application/json",
        }
      });
    }

    if (selectedDoctor.user) {
      await fetch('/api/appointments/assignedTo', {
        method: 'POST',
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          idAp: savedAppointment.result.id,
          idDoc: selectedDoctor.user.id
        })
      });
    }

    showOkModal();
  })
</script>
{% endblock %}